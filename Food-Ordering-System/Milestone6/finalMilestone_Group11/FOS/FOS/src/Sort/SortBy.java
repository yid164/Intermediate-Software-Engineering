package Sort;

/**
 * Yuecheng Rong
 */

import database.GoConnection;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 * This is an abstract class of all the sort functions
 */
public class SortBy implements Skeleton
{

    /** The super array that contains all the  information of the restaurant been searched. */
    public ArrayList<SortInfo> sortInfos;

    /** The Query need to be executed. */
    public String Query;

    /** The Exception message. */
    public String message = "";

    /** The connection to SQL */
    public GoConnection connection = new GoConnection();

    /** The result returned by SQL */
    public ResultSet resultSet = null;

    /**
     * Constructor
     */
    public SortBy()
    {

    }

    /** Helper function to set the Query. */
    public void setQuery(String Query)
    {
        this.Query = Query;
    }

    /** Helper function to clear the super array */
    public void clearSuper()
    {
        sortInfos = new ArrayList<>();
    }


    /**
     * Input a query and do the sorting.
     * Sorting is done by executing different queries
     *
     * @param city the city of the customer lives
     * @param province the province of the customer lives
     */
    public void doSort(String city, String province, int customer_id)
    {
        connection.connect();
        // Clear the super array
        clearSuper();

        if(connection.coon!=null)
        {
            try
            {
                this.inputSituation(city, province);
                while(resultSet.next())
                {
                    setSortInfos(resultSet);
                }
                this.afterLogin(customer_id);
                connection.coon.close();
            }
            catch (SQLException e)
            {
                message = e.fillInStackTrace().toString();
            }
        }
        else
        {
            message = "lost connection";
        }
    }



    /**
     * This is a helper function to change the statement of Query
     * Will be use by sort in both login and not login situation
     *
     * @param city the city of the customer lives
     * @param province the province of the customer lives
     */
    public void inputSituation(String city, String province) { }


    /**
     * This is a helper function to store the information generated into the super array
     * Will be use by sort in both login and not login situation
     *
     * @param resultSet the result generated by executing SQL
     */
    public void setSortInfos(ResultSet resultSet)
    {
        try
        {
            SortInfo sortInfo = new SortInfo();
            sortInfo.setRest_id(resultSet.getInt(1));
            sortInfo.setRest_name(resultSet.getString(2));
            sortInfo.setRest_address(resultSet.getInt(3) + " " +
                                     resultSet.getString(4) + " " +
                                     resultSet.getString(5) + " " +
                                     resultSet.getString(6));
            sortInfo.setRest_time(resultSet.getTime(7));
            sortInfo.setRest_rate(resultSet.getFloat(8));
            sortInfo.setRest_avg_price(resultSet.getFloat(9));
            sortInfos.add(sortInfo);
        }
        catch (SQLException e)
        {
            message = e.fillInStackTrace().toString();
        }

    }

    /**
     * This is a helper function to generate the distance if customer is logged in
     *
     * @param customer_id the logged in customer's id
     */
    public void afterLogin(int customer_id) { }



    /**
     * Helper function that can print the super array on the console.
     */
    public void printSuperArray()
    {
        for (int i = 0; i < sortInfos.size(); i++)
        {
            System.out.println(sortInfos.get(i));
        }
    }
}
